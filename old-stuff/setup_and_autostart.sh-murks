#!/bin/bash
# setup_and_autostart.sh

# Farbcodes für Terminal-Ausgaben
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}==================================================${NC}"
echo -e "${BLUE}  360° Drehteller - Komplette Systemeinrichtung  ${NC}"
echo -e "${BLUE}==================================================${NC}"

# Überprüfen, ob das Skript mit sudo ausgeführt wird
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}Bitte führen Sie das Skript mit sudo aus:${NC}"
  echo -e "${YELLOW}sudo bash setup_and_autostart.sh${NC}"
  exit 1
fi

# Verzeichnis des Projekts bestimmen
PROJECT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
echo -e "${YELLOW}Projektverzeichnis: ${PROJECT_DIR}${NC}"

# Benutzernamen ermitteln (vom sudo-Aufruf)
REAL_USER=${SUDO_USER:-$USER}
REAL_USER_HOME=$(eval echo ~$REAL_USER)
echo -e "${YELLOW}Nutzerverzeichnis: ${REAL_USER_HOME}${NC}"

# 1. System-Abhängigkeiten installieren
echo -e "\n${GREEN}1. Installiere System-Abhängigkeiten...${NC}"
apt-get update
apt-get install -y \
    python3-venv \
    python3-dev \
    python3-pip \
    python3-opencv \
    fswebcam \
    v4l-utils \
    libatlas-base-dev \
    git \
    curl \
    nginx \
    gphoto2

# Installiere Arduino CLI
if ! command -v arduino-cli &> /dev/null; then
    echo -e "${YELLOW}Installiere Arduino CLI...${NC}"
    curl -fsSL https://raw.githubusercontent.com/arduino/arduino-cli/master/install.sh | BINDIR=/usr/local/bin sh
    arduino-cli core update-index
    arduino-cli core install arduino:avr
fi

# 2. Python virtuelle Umgebung einrichten
echo -e "\n${GREEN}2. Richte virtuelle Python-Umgebung ein...${NC}"
cd "$PROJECT_DIR"

# Virtuelle Umgebung erstellen, falls nicht vorhanden
if [ ! -d "myenv" ]; then
    python3 -m venv myenv
fi

# Eigentümerrechte für den tatsächlichen Benutzer setzen
chown -R $REAL_USER:$REAL_USER "$PROJECT_DIR/myenv"

# Abhängigkeiten innerhalb der virtuellen Umgebung installieren
echo -e "${YELLOW}Installiere Python-Abhängigkeiten...${NC}"
source myenv/bin/activate
pip install --upgrade pip wheel setuptools

# Wenn requirements.txt existiert, installiere daraus
if [ -f "requirements.txt" ]; then
    pip install -r requirements.txt
else
    # Installiere notwendige Pakete mit aktualisierten Versionen
    pip install flask==2.2.3
    pip install werkzeug==2.2.3
    pip install opencv-python==4.7.0.72
    pip install numpy==1.24.3
    pip install pillow==10.1.0  # Aktualisiert auf kompatible Version für scikit-image
    pip install pyserial==3.5
    pip install scipy==1.10.1
    pip install pandas==2.0.1
    pip install requests==2.30.0
    pip install imageio==2.31.1
    pip install python-dotenv==1.0.0
    pip install gunicorn
    pip install gphoto2==2.3.4
    
    # Optional: scikit-image, falls benötigt
    pip install scikit-image==0.25.2
fi

# 3. Verzeichnisstruktur erstellen
echo -e "\n${GREEN}3. Erstelle Verzeichnisstruktur...${NC}"
mkdir -p "$PROJECT_DIR/static/photos"
mkdir -p "$PROJECT_DIR/static/sample_images"
mkdir -p "$PROJECT_DIR/projects"

# Berechtigungen setzen
chown -R $REAL_USER:$REAL_USER "$PROJECT_DIR/static"
chown -R $REAL_USER:$REAL_USER "$PROJECT_DIR/projects"

# Berechtigungen für serielle Ports und Video-Geräte
echo -e "${YELLOW}Füge Benutzer zu notwendigen Gruppen hinzu...${NC}"
usermod -a -G dialout $REAL_USER
usermod -a -G video $REAL_USER

# 4. Platzhalter-Bild erstellen, falls nicht vorhanden
echo -e "\n${GREEN}4. Erzeuge Platzhalter-Bild...${NC}"
if [ ! -f "$PROJECT_DIR/static/placeholder.jpg" ]; then
    python3 - << 'EOL'
from PIL import Image, ImageDraw, ImageFont
import os

def generate_placeholder(output_path='static/placeholder.jpg', width=640, height=480):
    # Stelle sicher, dass der Zielordner existiert
    os.makedirs(os.path.dirname(output_path), exist_ok=True)

    # Erstelle ein neues Bild mit grauem Hintergrund
    image = Image.new('RGB', (width, height), color=(240, 240, 240))
    draw = ImageDraw.Draw(image)

    # Zeichne Rahmen
    draw.rectangle((0, 0, width-1, height-1), outline=(200, 200, 200), width=2)

    # Füge Text hinzu
    try:
        # Versuche, einen Standardschriftsatz zu laden
        font = ImageFont.load_default()
    except IOError:
        # Fallback auf Standardschriftart
        font = ImageFont.load_default()

    text = "Kein Bild verfügbar"
    text_width = 200  # Ungefähre Textbreite
    text_position = ((width - text_width) // 2, height // 2 - 15)
    draw.text(text_position, text, fill=(100, 100, 100), font=font)

    # Speichere das Bild
    image.save(output_path)
    print(f"Platzhalter-Bild erstellt: {output_path}")

generate_placeholder()
EOL
    # Berechtigungen setzen
    chown $REAL_USER:$REAL_USER "$PROJECT_DIR/static/placeholder.jpg"
fi

# 5. Systemd-Service für Autostart einrichten
echo -e "\n${GREEN}5. Richte Autostart-Service ein...${NC}"

# Service-Datei erstellen
cat > /etc/systemd/system/drehteller360.service << EOL
[Unit]
Description=360 Drehteller Fotografie System
After=network.target

[Service]
User=${REAL_USER}
WorkingDirectory=${PROJECT_DIR}
ExecStart=${PROJECT_DIR}/myenv/bin/python ${PROJECT_DIR}/web.py
Restart=always
Environment="PATH=${PROJECT_DIR}/myenv/bin:/usr/local/bin:/usr/bin:/bin"
Environment="PYTHONPATH=${PROJECT_DIR}"

[Install]
WantedBy=multi-user.target
EOL

# Systemd neu laden und Service aktivieren
systemctl daemon-reload
systemctl enable drehteller360.service
systemctl start drehteller360.service

echo -e "${GREEN}Service gestartet und für Autostart eingerichtet.${NC}"

# 6. Nginx als Reverse Proxy einrichten (optional)
echo -e "\n${GREEN}6. Nginx als Reverse Proxy einrichten?${NC}"
read -p "Möchten Sie Nginx als Reverse Proxy einrichten? (j/n): " setup_nginx

if [[ $setup_nginx == "j" || $setup_nginx == "J" ]]; then
    # Nginx-Konfiguration erstellen
    cat > /etc/nginx/sites-available/drehteller360 << EOL
server {
    listen 80;
    server_name _;

    location / {
        proxy_pass http://127.0.0.1:5000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    location /static {
        alias ${PROJECT_DIR}/static;
    }
}
EOL

    # Aktiviere die Konfiguration
    ln -sf /etc/nginx/sites-available/drehteller360 /etc/nginx/sites-enabled/
    rm -f /etc/nginx/sites-enabled/default

    # Testen und neustarten
    nginx -t && systemctl restart nginx

    echo -e "${GREEN}Nginx als Reverse Proxy eingerichtet. Das System ist nun über Port 80 erreichbar.${NC}"
else
    echo -e "${YELLOW}Nginx-Setup übersprungen. Das System ist direkt über Port 5000 erreichbar.${NC}"
fi

# 7. Erstelle ein praktisches Start/Stop-Skript
echo -e "\n${GREEN}7. Erstelle Hilfsskript für Start/Stop/Status...${NC}"

cat > "${PROJECT_DIR}/drehteller.sh" << EOL
#!/bin/bash
# drehteller.sh - Hilfsskript zum Verwalten des 360° Drehteller-Systems

case "\$1" in
    start)
        sudo systemctl start drehteller360.service
        echo "360° Drehteller-System gestartet."
        ;;
    stop)
        sudo systemctl stop drehteller360.service
        echo "360° Drehteller-System gestoppt."
        ;;
    restart)
        sudo systemctl restart drehteller360.service
        echo "360° Drehteller-System neugestartet."
        ;;
    status)
        sudo systemctl status drehteller360.service
        ;;
    logs)
        sudo journalctl -u drehteller360.service -f
        ;;
    update)
        cd "${PROJECT_DIR}"
        source myenv/bin/activate
        pip install --upgrade pip wheel setuptools
        pip install flask==2.2.3 werkzeug==2.2.3 pillow==10.1.0
        echo "Python-Pakete aktualisiert."
        sudo systemctl restart drehteller360.service
        echo "360° Drehteller-System neugestartet."
        ;;
    *)
        echo "Verwendung: \$0 {start|stop|restart|status|logs|update}"
        exit 1
        ;;
esac
exit 0
EOL

chmod +x "${PROJECT_DIR}/drehteller.sh"
chown $REAL_USER:$REAL_USER "${PROJECT_DIR}/drehteller.sh"

# 8. Abschluss
HOST_IP=$(hostname -I | cut -d' ' -f1)
echo -e "\n${GREEN}==================================================${NC}"
echo -e "${GREEN}  360° Drehteller-System erfolgreich eingerichtet!  ${NC}"
echo -e "${GREEN}==================================================${NC}"
echo -e "${YELLOW}Das System wurde gestartet und läuft automatisch beim Systemstart.${NC}"
echo -e "\n${BLUE}Zugriff auf das System:${NC}"
if [[ $setup_nginx == "j" || $setup_nginx == "J" ]]; then
    echo -e "  URL: ${GREEN}http://${HOST_IP}/${NC}"
else
    echo -e "  URL: ${GREEN}http://${HOST_IP}:5000/${NC}"
fi

echo -e "\n${BLUE}Verwaltung des Systems:${NC}"
echo -e "  ${YELLOW}./drehteller.sh start${NC}   - Startet den Dienst"
echo -e "  ${YELLOW}./drehteller.sh stop${NC}    - Stoppt den Dienst"
echo -e "  ${YELLOW}./drehteller.sh restart${NC} - Neustart des Dienstes"
echo -e "  ${YELLOW}./drehteller.sh status${NC}  - Zeigt den Status"
echo -e "  ${YELLOW}./drehteller.sh logs${NC}    - Zeigt die Logs"
echo -e "  ${YELLOW}./drehteller.sh update${NC}  - Aktualisiert Python-Pakete"
